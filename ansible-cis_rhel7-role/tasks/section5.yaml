---

- name: '{{ rules_cis.rule_5_1_1.description }}'
  ansible.builtin.service:
    name: crond
    enabled: yes
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_1.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.1

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_1
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_2.description }}'
  ansible.builtin.file:
    dest: /etc/crontab
    owner: root
    group: root
    mode: 0600
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_2.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.2

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_2
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_3.description }}'
  ansible.builtin.file:
    dest: /etc/cron.hourly
    state: directory
    owner: root
    group: root
    mode: 0700
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_3.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.3

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_3
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_4.description }}'
  ansible.builtin.file:
    dest: /etc/cron.daily
    state: directory
    owner: root
    group: root
    mode: 0700
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_4.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.4

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_4
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_5.description }}'
  ansible.builtin.file:
    dest: /etc/cron.weekly
    state: directory
    owner: root
    group: root
    mode: 0700
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_5.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.5

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_5
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_6.description }}'
  ansible.builtin.file:
    dest: /etc/cron.monthly
    state: directory
    owner: root
    group: root
    mode: 0700
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_6.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.6

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_6
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_1_7.description }}'
  ansible.builtin.file:
    dest: /etc/cron.d
    state: directory
    owner: root
    group: root
    mode: 0700
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_7.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.7

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_7
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: "{{ rules_cis.rule_5_1_8.description }}"
  block:
    - name: "{{ rules_cis.rule_5_1_8.description }}"
      ansible.builtin.file:
        dest: /etc/at.deny
        state: absent

    - name: "{{ rules_cis.rule_5_1_8.description }} | Check if at.allow exists"
      ansible.builtin.stat:
        path: "/etc/at.allow"
      register: p

    - name: "{{ rules_cis.rule_5_1_8.description }}"
      ansible.builtin.file:
        dest: /etc/at.allow
        state: '{{ "file" if  p.stat.exists else "touch" }}'
        owner: root
        group: root
        mode: 0600

    - name: "{{ rules_cis.rule_5_1_8.description }}"
      ansible.builtin.file:
        dest: /etc/cron.deny
        state: absent

    - name: "{{ rules_cis.rule_5_1_8.description }} | Check if cron.allow exists"
      ansible.builtin.stat:
        path: "/etc/cron.allow"
      register: p

    - name: "{{ rules_cis.rule_5_1_8.description }}"
      ansible.builtin.file:
        dest: /etc/cron.allow
        state: '{{ "file" if  p.stat.exists else "touch" }}'
        owner: root
        group: root
        mode: 0600
      register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_1_8.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.1.8

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_8
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_1.description }}'
  ansible.builtin.file:
    dest: /etc/ssh/sshd_config
    state: file
    owner: root
    group: root
    mode: 0600
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_1.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.1

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_1
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_2.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*Protocol'
    line: 'Protocol 2'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_2.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.2

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_2
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_3.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*LogLevel'
    line: 'LogLevel INFO'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_3.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.3

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_3
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_4.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*X11Forwarding'
    line: 'X11Forwarding no'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_4.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.4

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_4
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_5.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*MaxAuthTries \d'
    line: 'MaxAuthTries 4'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_5.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.5

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_5
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_6.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*IgnoreRhosts'
    line: 'IgnoreRhosts yes'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_6.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.6

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_6
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_7.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*HostbasedAuthentication'
    line: 'HostbasedAuthentication no'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_7.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.7

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_7
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_8.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*PermitRootLogin'
    line: 'PermitRootLogin no'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_8.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.8

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_8
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_9.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_9.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.9

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_9
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_10.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*PermitUserEnvironment'
    line: 'PermitUserEnvironment no'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_10.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.10

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_10
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_11.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*Ciphers'
    line: "Ciphers {{ rhel7_sshd_config['Ciphers'] }}"
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_11.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.11

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_11
    _current_rule_output: '{{ _output_rule }}'


- name: '{{ rules_cis.rule_5_2_11_extra.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*MACs'
    line: 'MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_11_extra.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.11

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_11_extra
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_12.description }}'
  block:
    - name: "{{ rules_cis.rule_5_2_12.description }}"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?(\\s)*ClientAliveInterval'
        line: "ClientAliveInterval {{ rhel7cis_sshd['clientaliveinterval'] }}"

    - name: "{{ rules_cis.rule_5_2_12.description }} | Ensure SSH ClientAliveCountMax set to <= 3"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?(\\s)*ClientAliveCountMax'
        line: "ClientAliveCountMax {{ rhel7cis_sshd['clientalivecountmax'] }}"
      register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_12.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.12

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_12
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_13.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*LoginGraceTime'
    line: 'LoginGraceTime 60'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_13.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.13

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_13
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_2_14.description }}'
  block:
    - name: "{{ rules_cis.rule_5_2_14.description }} | allowusers"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^(#)?(\\s)*AllowUsers"
        line: AllowUsers {{ rhel7cis_sshd['allowusers'] }}
      notify:
        - restart sshd
      when:
        - "rhel7cis_sshd['allowusers']|default('') != ''"

    - name: "{{ rules_cis.rule_5_2_14.description }} | allowgroups"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^(#)?(\\s)*AllowGroups"
        line: AllowGroups {{ rhel7cis_sshd['allowgroups'] }}
      notify:
        - restart sshd
      when:
        - "rhel7cis_sshd['allowgroups']|default('') != ''"

    - name: "{{ rules_cis.rule_5_2_14.description }} | denyusers"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^(#)?(\\s)*DenyUsers"
        line: DenyUsers {{ rhel7cis_sshd['denyusers'] }}
      notify:
        - restart sshd
      when:
        - "rhel7cis_sshd['denyusers']|default('') != ''"

    - name: "{{ rules_cis.rule_5_2_14.description }} | denygroups"
      ansible.builtin.lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^(#)?(\\s)*DenyGroups"
        line: DenyGroups {{ rhel7cis_sshd['denygroups'] }}
      notify:
        - restart sshd
      when:
        - "rhel7cis_sshd['denygroups']|default('') != ''"
      register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_2_14.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.14

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_14
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: "{{ rules_cis.rule_5_2_15.description }}"
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?(\\s)*Banner'
    line: 'Banner /etc/issue.net'
  when:
    - rules_cis.rule_5_2_15.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.2.16

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_15
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_3_1.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/security/pwquality.conf
    regexp: '^(#)?(\\s)*{{ item.key }}'
    line: '{{ item.key }} = {{ item.value }}'
  loop:
    - { key: 'minlen',  value: '14' }
    - { key: 'dcredit', value: '-1' }
    - { key: 'ucredit', value: '-1' }
    - { key: 'ocredit', value: '-1' }
    - { key: 'lcredit', value: '-1' }
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_3_1.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.3.1

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_1
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_3_2.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_3_2.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.3.2
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_2
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_3_3.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_3_3.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.3.3
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_3
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_3_4.description }}'
  ansible.builtin.command: authconfig --passalgo=sha512 --update
  changed_when: no
  failed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_3_4.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.3.4

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_4
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_1_1.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^(#)?(\\s)*PASS_MAX_DAYS'
    line: 'PASS_MAX_DAYS 90'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_1_1.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.1.1

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1_1
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_1_2.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^(#)?(\\s)*PASS_MIN_DAYS'
    line: 'PASS_MIN_DAYS 7'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_1_2.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.1.2

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1_2
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_1_3.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^(#)?(\\s)*PASS_WARN_AGE'
    line: 'PASS_WARN_AGE 7'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_1_3.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.1.3

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1_3
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_1_4.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_1_4.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.1.4
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1_4
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_1_5.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_1_5.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.1.5
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1_5
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_2.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_2.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.2
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_2
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_3.description }}'
  ansible.builtin.command: usermod -g 0 root
  changed_when: no
  failed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_3.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.3

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_3
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_4.description }}'
  block:
    - name: "{{ rules_cis.rule_5_4_4.description }} | /etc/bashrc"
      ansible.builtin.replace:
        path: /etc/bashrc
        regexp: '(^\\s+umask) 0[02]2'
        replace: '\1 0077'

    - name: "{{ rules_cis.rule_5_4_4.description }} | /etc/profile"
      ansible.builtin.replace:
        path: /etc/profile
        regexp: '(^\\s+umask) 0[02]2'
        replace: '\1 0077'
      register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_4.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.4

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_4
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_4_5.description }}'
  block:
    - name: "{{ rules_cis.rule_5_4_5.description }} | /etc/bashrc"
      ansible.builtin.lineinfile: >
        state=present
        backup=no
        dest=/etc/bashrc
        regexp='^#?TMOUT=.*'
        line='TMOUT={{ rhel7cis_sshd['clientaliveinterval'] }}'

    - name: "{{ rules_cis.rule_5_4_5.description }} | /etc/profile"
      ansible.builtin.lineinfile: >
        state=present
        backup=no
        dest=/etc/profile
        regexp='^#?TMOUT=.*'
        line='TMOUT={{ rhel7cis_sshd['clientaliveinterval'] }}'
      register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_4_5.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.4.5

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_5
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_5.description }}'
  ansible.builtin.shell: /bin/true
  changed_when: no
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_5.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.5
    - notimplemented

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5
    _current_rule_output: '{{ _output_rule }}'

# ----


- name: '{{ rules_cis.rule_5_6.description }}'
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/pam.d/su
    regexp: '^(#)?auth\s+required\s+pam_wheel\.so'
    line: 'auth           required        pam_wheel.so use_uid'
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_6.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.6

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_6
    _current_rule_output: '{{ _output_rule }}'


- name: "{{ rules_cis.rule_5_6.description }} | wheel group contains root"
  ansible.builtin.user:
    name: root
    groups: wheel
  register: _output_rule
  ignore_errors: yes
  when:
    - rules_cis.rule_5_6.enabled
  tags:
    - level1
    - level2
    - patch
    - rule_5.6

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_6
    _current_rule_output: '{{ _output_rule }}'

