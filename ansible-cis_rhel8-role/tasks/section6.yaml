---
- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_1.description }}'
  register: _output_rule
  ansible.builtin.shell: /bin/true
  changed_when: false
  when:
    - rules.rule_6_1_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_2.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/passwd
    owner: root
    group: root
    mode: 0644
  when:
    - rules.rule_6_1_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_3.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/shadow
    owner: root
    group: root
    mode: 0000
  when:
    - rules.rule_6_1_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_4.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/group
    owner: root
    group: root
    mode: 0644
  when:
    - rules.rule_6_1_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_5.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/gshadow
    owner: root
    group: root
    mode: 0000
  when:
    - rules.rule_6_1_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_6.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/passwd-
    owner: root
    group: root
    mode: 0600
  when:
    - rules.rule_6_1_6.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_6
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_7.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/shadow-
    owner: root
    group: root
    mode: 0000
  when:
    - rules.rule_6_1_7.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_7
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_8.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/group-
    owner: root
    group: root
    mode: 0644
  when:
    - rules.rule_6_1_8.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_8
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_9.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/gshadow-
    owner: root
    group: root
    mode: 0000
  when:
    - rules.rule_6_1_9.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_9
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_10.description }}'
  register: _output_rule
  ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002| xargs -I '{}' chmod o-w '{}'
  when:
    - rules.rule_6_1_10.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_10
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_11.description }}'
  register: _output_rule
  ansible.builtin.shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser| xargs -I '{}' chown root '{}'
  when:
    - rules.rule_6_1_11.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_11
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_12.description }}'
  register: _output_rule
  ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup| xargs -I '{}' chgrp root '{}'
  when:
    - rules.rule_6_1_12.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_12
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_13.description }}'
  register: _output_rule
  ansible.builtin.shell: /bin/true
  changed_when: false
  when:
    - rules.rule_6_1_13.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_13
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_1_14.description }}'
  register: _output_rule
  ansible.builtin.shell: /bin/true
  changed_when: false
  when:
    - rules.rule_6_1_14.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_1_14
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_1.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    awk -F: '($2 == "" ) { print $1 " does not have a password "}' /etc/shadow
  failed_when: _output_rule.failed or _output_rule.stdout| length > 0
  when:
    - rules.rule_6_2_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_2.description }}'
  register: _output_rule
  ansible.builtin.shell: sed -i '/^+/ d' /etc/passwd
  changed_when: false
  when:
    - rules.rule_6_2_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_3.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    for x in $(echo $PATH | tr ":" " ") ; do
      if [ -d "$x" ] ; then
        ls -ldH "$x" | awk '
    $9 == "." {print "PATH contains current working directory (.)"}
    $3 != "root" {print $9, "is not owned by root"}
    substr($1,6,1) != "-" {print $9, "is group writable"}
    substr($1,9,1) != "-" {print $9, "is world writable"}'
      else
        echo "$x is not a directory"
      fi
    done
  failed_when: _output_rule.failed or _output_rule.stdout| length > 0
  when:
    - rules.rule_6_2_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_4.description }}'
  register: _output_rule
  ansible.builtin.shell: grep '^\+:' /etc/shadow
  failed_when: _output_rule.stdout_lines != []
  changed_when: false
  when:
    - rules.rule_6_2_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_5.description }}'
  register: _output_rule
  ansible.builtin.shell: grep '^\+:' /etc/group
  failed_when: _output_rule.stdout_lines != []
  changed_when: false
  when:
    - rules.rule_6_2_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_6.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    awk -F: '($3 == 0) { print $1 }' /etc/passwd
  failed_when: _output_rule.failed or _output_rule.stdout_lines != ['root']
  when:
    - rules.rule_6_2_6.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_6
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_7.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash
    grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        dirperm=$(ls -ld $dir | cut -f1 -d" ")
        if [ $(echo $dirperm | cut -c6) != "-" ]; then
          echo "Group Write permission set on the home directory ($dir) of user $user"
        fi
        if [ $(echo $dirperm | cut -c8) != "-" ]; then
          echo "Other Read permission set on the home directory ($dir) of user $user"
        fi
        if [ $(echo $dirperm | cut -c9) != "-" ]; then
          echo "Other Write permission set on the home directory ($dir) of user $user"
        fi
        if [ $(echo $dirperm | cut -c10) != "-" ]; then
          echo "Other Execute permission set on the home directory ($dir) of user $user"
        fi
      fi
    done
  when:
    - rules.rule_6_2_7.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_7
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_8.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
      owner=$(stat -L -c "%U" "$dir")
      if [ "$owner" != "$user" ]; then
        echo "The home directory ($dir) of user $user is owned by $owner."
      fi
    fi
    done
  when:
    - rules.rule_6_2_8.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_8
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_9.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.[A-Za-z0-9]*; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=$(ls -ld $file | cut -f1 -d" ")

            if [ $(echo $fileperm | cut -c6)  != "-" ]; then
              echo "Group Write permission set on file $file"
            fi
            if [ $(echo $fileperm | cut -c9)  != "-" ]; then
              echo "Other Write permission set on file $file"
            fi
          fi
        done
      fi
    done
  when:
    - rules.rule_6_2_9.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_9
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_10.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
          echo ".forward file $dir/.forward exists"
        fi
      fi
    done
  when:
    - rules.rule_6_2_10.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_10
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_11.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
          echo ".netrc file $dir/.netrc exists"
        fi
      fi
    done
  when:
    - rules.rule_6_2_11.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_11
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_12.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.netrc; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=$(ls -ld $file | cut -f1 -d" ")
            if [ $(echo $fileperm | cut -c5)  != "-" ]; then
              echo "Group Read set on $file"
            fi
            if [ $(echo $fileperm | cut -c6)  != "-" ]; then
              echo "Group Write set on $file"
            fi
            if [ $(echo $fileperm | cut -c7)  != "-" ]; then
              echo "Group Execute set on $file"
            fi
            if [ $(echo $fileperm | cut -c8)  != "-" ]; then
              echo "Other Read set on $file"
            fi
            if [ $(echo $fileperm | cut -c9)  != "-" ]; then
              echo "Other Write set on $file"
            fi
            if [ $(echo $fileperm | cut -c10)  != "-" ]; then
              echo "Other Execute set on $file"
            fi
          fi
        done
      fi
    done
  when:
    - rules.rule_6_2_12.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_12
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_13.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.rhosts; do
          if [ ! -h "$file" -a -f "$file" ]; then
            echo ".rhosts file in $dir"
          fi
        done
      fi
    done
  when:
    - rules.rule_6_2_13.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_13
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_14.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
      grep -q -P "^.*?:[^:]*:$i:" /etc/group
      if [ $? -ne 0 ]; then
        echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
      fi
    done
  when:
    - rules.rule_6_2_14.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_14
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_15.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    cut -f3 -d":" /etc/passwd | sort -n | uniq -c | while read x ; do
      [ -z "$x" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
        users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
        echo "Duplicate UID ($2): $users"
      fi
    done
  when:
    - rules.rule_6_2_15.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_15
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_16.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    cut -d: -f3 /etc/group | sort | uniq -d | while read x ; do
        echo "Duplicate GID ($x) in /etc/group"
    done
  when:
    - rules.rule_6_2_16.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_16
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_17.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    cut -d: -f1 /etc/passwd | sort | uniq -d | while read x
    do echo "Duplicate login name ${x} in /etc/passwd"
    done
  when:
    - rules.rule_6_2_17.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_17
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_18.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash

    cut -d: -f1 /etc/group | sort | uniq -d | while read x
    do echo "Duplicate group name ${x} in /etc/group"
    done
  when:
    - rules.rule_6_2_18.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_18
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_19.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group
  failed_when: _output_rule.stdout_lines != []
  when:
    - rules.rule_6_2_19.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_19
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_6_2_20.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    #!/bin/bash
    grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false" && $3 > 1000) { print $1 " " $6 }' | while read -r user dirlist; do
      if [ ! -d $dirlist ]; then
        echo "The home directory ($dirlist) of user $user does not exist."
      fi
    done
  failed_when: _output_rule.failed or _output_rule.stdout| length > 0
  when:
    - rules.rule_6_2_20.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_6_2_20
    _current_rule_output: '{{ _output_rule }}'

