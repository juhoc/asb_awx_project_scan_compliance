---
- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_1.description }}'
  register: _output_rule
  ansible.builtin.service:
    name: crond
    enabled: yes
    state: started
  when:
    - rules.rule_5_1_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_2.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/crontab
    owner: root
    group: root
    mode: 0600
  when:
    - rules.rule_5_1_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_3.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/cron.hourly
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - rules.rule_5_1_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_4.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/cron.daily
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - rules.rule_5_1_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_5.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/cron.weekly
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - rules.rule_5_1_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_6.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/cron.monthly
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - rules.rule_5_1_6.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_6
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_7.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/cron.d
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - rules.rule_5_1_7.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_7
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_1_8.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: "{{ item.file }}"
    state: "{{ item.state }}"
    owner: root
    group: root
    mode: 0600
  loop:
    - file: "/etc/at.allow"
      state: touch
    - file: "/etc/at.deny"
      state: absent
    - file: "/etc/cron.allow"
      state: touch
    - file: "/etc/cron.deny"
      state: absent
  when:
    - rules.rule_5_1_8.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_1_8
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_1.description }}'
  register: _output_rule
  ansible.builtin.file:
    dest: /etc/ssh/sshd_config
    state: file
    owner: root
    group: root
    mode: 0600
  when:
    - rules.rule_5_2_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_2.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^(#)?{{ item.directive }}\\s*"
    line: "{{ item.directive }} {{ item.value }}"
  loop: "{{ _sshd_access_limited }}"
  when:
    - rules.rule_5_2_2.enabled
    - _sshd_access_limited is defined
    - item.value| length > 0

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_3.description }} (step 1)'
  ansible.builtin.find:
    path: /etc/ssh/
    pattern: "ssh_host_*_key"
  register: _ssh_private_hostkeys
  when:
    - rules.rule_5_2_3.enabled

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_3.description }} (step 2)'
  register: _output_rule
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: 0600
    owner: root
    group: root
  loop: "{{ _ssh_private_hostkeys.files | flatten(levels=1) }}"
  when:
    - rules.rule_5_2_3.enabled
    - _ssh_private_hostkeys.files is defined
    - _ssh_private_hostkeys.files != []

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_4.description }} (step 1)'
  ansible.builtin.find:
    paths: /etc/ssh
    file_type: file
    patterns: "ssh_host_*_key.pub"
  register: _ssh_public_hostkeys
  when:
    - rules.rule_5_2_4.enabled

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_4.description }} (step 2)'
  register: _output_rule
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: '0644'
    owner: root
    group: root
  loop: "{{ _ssh_public_hostkeys.files | flatten(levels=1) }}"
  when:
    - rules.rule_5_2_4.enabled
    - _ssh_public_hostkeys.files is defined
    - _ssh_public_hostkeys.files != []

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_5.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^LogLevel'
    line: 'LogLevel INFO'
  notify: restart_sshd
  when:
    - rules.rule_5_2_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_6.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^X11Forwarding'
    line: 'X11Forwarding no'
  notify: restart_sshd
  when:
    - rules.rule_5_2_6.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_6
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_7.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?MaxAuthTries \d'
    line: 'MaxAuthTries 4'
  notify: restart_sshd
  when:
    - rules.rule_5_2_7.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_7
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_8.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^IgnoreRhosts'
    line: 'IgnoreRhosts yes'
  notify: restart_sshd
  when:
    - rules.rule_5_2_8.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_8
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_9.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^HostbasedAuthentication'
    line: 'HostbasedAuthentication no'
  notify: restart_sshd
  when:
    - rules.rule_5_2_9.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_9
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_10.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: restart_sshd
  when:
    - rules.rule_5_2_10.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_10
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_11.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  notify: restart_sshd
  when:
    - rules.rule_5_2_11.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_11
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_12.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitUserEnvironment'
    line: 'PermitUserEnvironment no'
  notify: restart_sshd
  when:
    - rules.rule_5_2_12.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_12
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_13.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^{{ item.parameter }}'
    line: "{{ item.parameter }} {{ item.value }}"
  loop:
    - parameter: ClientAliveInterval
      value: 1800
    - parameter: ClientAliveCountMax
      value: 0
  when:
    - rules.rule_5_2_13.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_13
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_14.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^LoginGraceTime'
    line: 'LoginGraceTime 60'
  when:
    - rules.rule_5_2_14.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_14
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_15.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^Banner'
    line: 'Banner /etc/issue.net'
  when:
    - rules.rule_5_2_15.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_15
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_16.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^UsePAM'
    line: 'UsePAM yes'
  when:
    - rules.rule_5_2_16.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_16
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_17.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^AllowTcpForwarding'
    line: 'AllowTcpForwarding no'
  when:
    - rules.rule_5_2_17.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_17
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_18.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '(?i)^maxstartups'
    line: 'MaxStartups 10:30:60'
  when:
    - rules.rule_5_2_18.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_18
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_19.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^MaxSessions'
    line: 'MaxSessions 4'
  when:
    - rules.rule_5_2_19.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_19
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_2_20.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/sysconfig/sshd
    regexp: '(^\s*CRYPTO_POLICY\s*=.*)'
    backrefs: true
    line: '#\1'
  when:
    - rules.rule_5_2_20.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_2_20
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_3_1.description }}'
  register: _output_rule
  ansible.builtin.shell: authselect create-profile IES -b sssd --symlink-meta --symlink-pam
  failed_when: _output_rule.failed and "File exists" not in _output_rule.stderr
  when:
    - rules.rule_5_3_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_3_2.description }}'
  register: _output_rule
  ansible.builtin.shell: authselect select custom/IES with-sudo with-faillock without-nullok --force with-mkhomedir
  when:
    - rules.rule_5_3_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_3_3.description }}'
  register: _output_rule
  ansible.builtin.shell: authselect select custom/IES with-sudo with-faillock without-nullok --force with-mkhomedir
  when:
    - rules.rule_5_3_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_3_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_4_1.description }} (step 1)'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/security/pwquality.conf
    regexp: '^{{ item.key }}'
    line: '{{ item.key }} = {{ item.value }}'
  loop:
    - { key: 'minlen', value: '14' }
    - { key: 'minclass', value: '4' }
    - { key: 'dcredit', value: '-1' }
    - { key: 'ucredit', value: '-1' }
    - { key: 'ocredit', value: '-1' }
    - { key: 'lcredit', value: '-1' }
  when:
    - rules.rule_5_4_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_4_1.description }} (step 2)'
  register: _output_rule
  ansible.builtin.shell: |
    CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/)
    for FN in system-auth password-auth; do
      [[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN
      [[ -z $(grep -E '^\s*password\s+requisite\s+pam_pwquality.so\s+.*enforce-for-root\s*.*$' $PTF) ]] && sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 enforce-for-root/' $PTF
      [[ -n $(grep -E '^\s*password\s+requisite\s+pam_pwquality.so\s+.*\s+retry=\S+\s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=\S+/retry=3/' $PTF || sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 retry=3/' $PTF
    done
    authselect apply-changes
  when:
    - rules.rule_5_4_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_4_2.description }} '
  register: _output_rule
  ansible.builtin.shell: |
    CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/)
    for FN in system-auth password-auth; do
      [[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN
      [[ -n $(grep -E '^\s*auth\s+required\s+pam_faillock.so\s+.*deny=\S+\s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=\S+/deny=5/g' $PTF || sed -ri 's/^\s*(auth\s+required\s+pam_faillock\.so\s+)(.*[^{}])(\{.*\}|)$/\1\2 deny=5 \3/' $PTF
      [[ -n $(grep -E '^\s*auth\s+required\s+pam_faillock.so\s+.*unlock_time=\S+\s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=\S+/unlock_time=900/g' $PTF || sed -ri 's/^\s*(auth\s+required\s+pam_faillock\.so\s+)(.*[^{}])(\{.*\}|)$/\1\2 unlock_time=900 \3/' $PTF
    done
    authselect apply-changes
  when:
    - rules.rule_5_4_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_4_3.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/)
    [[ -n $CP ]] && PTF=/etc/authselect/$CP/system-auth || PTF=/etc/authselect/system-auth
    [[ -n $(grep -E '^\s*password\s+(sufficient\s+pam_unix|requi(red|site)\s+pam_pwhistory).so\s+([^#]+\s+)*remember=\S+\s*.*$' $PTF) ]] && sed -ri 's/^\s*(password\s+(requisite|sufficient)\s+(pam_pwquality\.so|pam_unix\.so)\s+)(.*)(remember=\S+\s*)(.*)$/\1\4 remember=5 \6/' $PTF || sed -ri 's/^\s*(password\s+(requisite|sufficient)\s+(pam_pwquality\.so|pam_unix\.so)\s+)(.*)$/\1\4 remember=5/' $PTF
    authselect apply-changes
  when:
    - rules.rule_5_4_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_4_4.description }}'
  register: _output_rule
  ansible.builtin.shell: |
    CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/)
    for FN in system-auth password-auth; do
      [[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN
      [[ -z $(grep -E '^\s*password\s+sufficient\s+pam_unix.so\s+.*sha512\s*.*$' $PTF) ]] && sed -ri 's/^\s*(password\s+sufficient\s+pam_unix.so\s+)(.*)$/\1\2 sha512/' $PTF
    done
    authselect apply-changes
  when:
    - rules.rule_5_4_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_4_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_1_1.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: 'PASS_MAX_DAYS 42'
  when:
    - rules.rule_5_5_1_1.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_1_1
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_1_2.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^PASS_MIN_DAYS'
    line: 'PASS_MIN_DAYS 7'
  when:
    - rules.rule_5_5_1_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_1_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_1_3.description }}'
  register: _output_rule
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/login.defs
    regexp: '^PASS_WARN_AGE'
    line: 'PASS_WARN_AGE 7'
  when:
    - rules.rule_5_5_1_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_1_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_1_4.description }}'
  register: _output_rule
  ansible.builtin.shell: useradd -D -f 30
  when:
    - rules.rule_5_5_1_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_1_4
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_1_5.description }}'
  register: _output_rule
  failed_when: _output_rule.failed and _output_rule.stdout_lines != []
  ansible.builtin.shell: |
    for usr in $(cut -d: -f1 /etc/shadow); do [[ $(chage --list $usr | grep '^Last password change' | cut -d: -f2) > $(date) ]] && echo "$usr :$(chage --list $usr | grep '^Last password change' | cut -d: -f2)"; done; true
  when:
    - rules.rule_5_5_1_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_1_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_2.description }}'
  register: _output_rule
  ansible.builtin.shell: "{{ item }}"
  loop:
    - |
      awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!="'"$(which nologin)"'" && $7!="/bin/false") {print $1}' /etc/passwd | xargs -I '{}' usermod -s $(which nologin) '{}'
    - |
      awk -F: '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}' |  xargs -I '{}' usermod -L '{}'
  when:
    - rules.rule_5_5_2.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_2
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_3.description }}'
  register: _output_rule
  ansible.builtin.copy:
    dest: /etc/profile.d/tmout.sh
    content: readonly TMOUT=1800 ; export TMOUT
    mode: 0644
    owner: root
    group: root
  when:
    - rules.rule_5_5_3.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_3
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_4.description }}'
  register: _output_rule
  ansible.builtin.shell: usermod -g 0 root
  when:
    - rules.rule_5_5_4.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_4
    _current_rule_output: '{{ _output_rule }}'

- name: "{{ rules.rule_5_5_5.description }} (step 1)"
  ansible.builtin.find:
    path: /etc/profile.d/
    pattern: "*.sh"
  register: _results_rule_5_5_5
  when:
    - rules.rule_5_5_5.enabled

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_5.description }} (step 2)'
  register: _output_rule
  ansible.builtin.replace:
    name: "{{ item.path }}"
    regexp: ^(\s*)umask\s*0[0-6][0-6]$
    replace: \1umask 077
  loop: "{{ _results_rule_5_5_5.files | flatten(levels=1) }}"
  when:
    - rules.rule_5_5_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_5.description }} (step 3)'
  register: _output_rule
  ansible.builtin.replace:
    name: "{{ item }}"
    regexp: ^(\s*)umask\s*0[0-6][0-6]$
    replace: \1umask 077
  loop:
    - "/etc/bashrc"
    - "/etc/profile"
  when:
    - rules.rule_5_5_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_5_5.description }} (step 4)'
  register: _output_rule
  ansible.builtin.lineinfile:
    name: "{{ item }}"
    line: umask 077
  loop:
    - "/etc/bashrc"
    - "/etc/profile"
  when:
    - rules.rule_5_5_5.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_5_5
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_6.description }}'
  register: _output_rule
  ansible.builtin.file:
    path: "/etc/securetty"
    state: absent
  when:
    - rules.rule_5_6.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_6
    _current_rule_output: '{{ _output_rule }}'

- ignore_errors: 'true'
  name: '{{ rules.rule_5_7.description }}'
  register: _output_rule
  ansible.builtin.pamd:
    name: su
    type: auth
    control: substack
    module_path: system-auth
    new_type: auth
    new_control: required
    new_module_path: pam_wheel.so
    module_arguments:
      - use_uid
    state: before
  when:
    - rules.rule_5_7.enabled

- name: update_report.yaml
  ansible.builtin.include: update_report.yaml
  vars:
    _current_rule: rule_5_7
    _current_rule_output: '{{ _output_rule }}'

